import aQute.bnd.gradle.Bundle
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'biz.aQute.bnd.builder' version '7.1.0'
    id "org.gradle.test-retry" version "1.6.4"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'signing'
}

def jarVersion = "2.3.2"
group = 'io.synadia'

def isMerge = System.getenv("BUILD_EVENT") == "push"
def isRelease = System.getenv("BUILD_EVENT") == "release"

// version is the variable the build actually uses.
version = isRelease ? jarVersion : jarVersion + "-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    maven { url "https://repo1.maven.org/maven2/" }
    maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
}

dependencies {
    implementation 'io.nats:jnats:2.21.5'
    implementation 'org.jspecify:jspecify:1.0.0'

    // these are here to override flink since the flink dependency version has vulnerabilities
    implementation 'org.apache.commons:commons-compress:1.28.0'
    implementation 'commons-io:commons-io:2.18.0'

    ext.flinkVersion='2.1.0'
    implementation "org.apache.flink:flink-core:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-files:${flinkVersion}"

    ext.slf4jVersion='2.0.17'
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    // implementation "org.slf4j:slf4j-simple:${slf4jVersion}" // use implementation for examples
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    testImplementation 'io.nats:jnats-server-runner:1.2.8'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'com.github.stefanbirkner:system-lambda:1.2.1'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.12.3'
    testImplementation 'org.mockito:mockito-core:5.10.0'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java','src/examples/java']
        }
        resources {
            srcDirs = ['src/examples/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

tasks.register('bundle', Bundle) {
    from sourceSets.main.output
    exclude("io/synadia/examples/**")
}

jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'io.synadia.flink-connector-nats',
                'Implementation-Title': 'Flink Connector Nats',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'synadia.io'
        )
    }

    exclude("io/synadia/examples/**")
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        events "started", "passed", "skipped", "failed"
        showStandardStreams = true
    }
    retry {
        failOnPassedAfterRetry = false
        maxFailures = 3
        maxRetries = 3
    }
    systemProperty 'junit.jupiter.execution.timeout.default', '3m'
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "Synadia Communications Inc. Java Flink Connector To Nats"
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        if (!OperatingSystem.current().isWindows()) {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
    }
}

tasks.register('examplesJar', Jar) {
    archiveClassifier.set('examples')
    manifest {
        attributes('Implementation-Title': 'Java Nats Examples',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'nats.io')
    }
    from(sourceSets.main.output) {
        include "io/synadia/examples/**"
    }
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
    afterEvaluate { // only report on main library not examples
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/examples**','**/Debug**'])
        }))
    }
}

artifacts {
    archives javadocJar, sourcesJar, examplesJar
}

if (isMerge || isRelease) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
                snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact examplesJar
            artifact javadocJar
            pom {
                name = rootProject.name
                packaging = 'jar'
                groupId = group
                artifactId = project.name
                description = 'Synadia Communications Inc. Java Flink Connector To Nats'
                url = 'https://github.com/synadia-io/flink-connector-nats'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "synadia"
                        name = "Synadia"
                        email = "info@synadia.com"
                        url = "https://synadia.io"
                    }
                }
                scm {
                    url = 'https://github.com/synadia-io/flink-connector-nats'
                }
            }
        }
    }
}

if (isRelease) {
    signing {
        def signingKeyId = System.getenv('SIGNING_KEY_ID')
        def signingKey = System.getenv('SIGNING_KEY')
        def signingPassword = System.getenv('SIGNING_PASSWORD')
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign configurations.archives
        sign publishing.publications.mavenJava
    }
}
